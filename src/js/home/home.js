import { getQuoteOfTheDay } from '../services/api/quotes-api';
import { getFilters } from '../services/api/filters-api';

export async function renderQuote() {
  const container = document.getElementById('quote-card');
  const today = new Date().toISOString().slice(0, 10);

  // 1. –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ localStorage
  try {
    const raw = localStorage.getItem('quote');
    if (raw) {
      const stored = JSON.parse(raw);

      if (stored?.date === today && stored?.quote) {
        container.innerHTML = createQuoteMarkup(stored.quote);
        return;
      }
    }
  } catch (err) {
    console.warn('Invalid quote data. Clearing...');
    localStorage.removeItem('quote');
  }

  // 2. –Ø–∫—â–æ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å—Ç–∞—Ä–∞ –¥–∞—Ç–∞ ‚Äî –æ—Ç—Ä–∏–º—É—î–º–æ –Ω–æ–≤—É
  try {
    const quote = await getQuoteOfTheDay();
    container.innerHTML = createQuoteMarkup(quote);

    // 3. –ó–∞–ø–∏—Å—É—î–º–æ –≤ localStorage —Ç—ñ–ª—å–∫–∏ –ø—ñ—Å–ª—è —É—Å–ø—ñ—à–Ω–æ–≥–æ –∑–∞–ø–∏—Ç—É
    localStorage.setItem('quote', JSON.stringify({ date: today, quote }));
  } catch (error) {
    container.innerHTML = `<p>Failed to load quote.</p>`;
    console.error('Quote API error:', error);
  }
}

function createQuoteMarkup({ author, quote }) {
  return `
    <div class="quote-block">
      <p class="quote-text">"${quote}"</p>
      <p class="quote-author">${author}</p>
    </div>
  `;
}

const state = {
  filter: 'Muscles', // –æ–±—Ä–∞–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä
  category: null, // –æ–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è (–Ω–∞–ø—Ä–∏–∫–ª–∞–¥ "abs")
  page: 1, // –Ω–æ–º–µ—Ä —Å—Ç–æ—Ä—ñ–Ω–∫–∏
  limit: 12, // –∫—ñ–ª—å–∫—ñ—Å—Ç—å –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É
  keyword: '', // –ø–æ—à—É–∫ –∑–∞ –∫–ª—é—á–æ–≤–∏–º —Å–ª–æ–≤–æ–º
};

export function initFilters() {
  const filterButtons = document.querySelectorAll('.filter-btn');
  filterButtons.forEach(button => {
    button.addEventListener('click', e => {
      const clickedFilter = e.currentTarget.dataset.type;

      state.filter = clickedFilter;
      state.page = 1;
      state.category = null;
      state.keyword = '';

      document.querySelector('.filter-btn.active')?.classList.remove('active');
      button.classList.add('active');

      console.log('üîò –û–±—Ä–∞–Ω–∏–π —Ñ—ñ–ª—å—Ç—Ä:', state.filter);
      loadCategories(clickedFilter);
    });
  });
  loadCategories(state.filter);
}

async function loadCategories(filter) {
  const container = document.getElementById('exercise-cards-container');
  container.innerHTML = '<p>Loading categories...</p>';
  try {
    const response = await getFilters({
      filter: filter,
      page: 1,
      limit: 50,
    });

    const categories = response.results;

    console.clear();
    console.log(`üì¶ –ö–∞—Ç–µ–≥–æ—Ä—ñ—ó –¥–ª—è —Ñ—ñ–ª—å—Ç—Ä–∞ "${filter}":`);
    console.table(categories);

    if (!categories.length) {
      container.innerHTML = '<p>No categories found.</p>';
      return;
    }

    const markup = categories.map(createCategoryCard).join('');
    container.innerHTML = markup;

    // üöÄ –î–æ–¥–∞–π –æ–±—Ä–æ–±–∫—É –∫–ª—ñ–∫—É –Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—é (–Ω–∞—Å—Ç—É–ø–Ω–∏–º –∫—Ä–æ–∫–æ–º)
    // document.querySelectorAll('.category-card').forEach(card => {
    //   card.addEventListener('click', () => {
    //     const categoryName = card.dataset.name;
    //     console.log('üìå –û–±—Ä–∞–Ω–∞ –∫–∞—Ç–µ–≥–æ—Ä—ñ—è:', categoryName);
    //     // TODO: –∑–∞–≤–∞–Ω—Ç–∞–∂–∏—Ç–∏ –≤–ø—Ä–∞–≤–∏ –ø–æ —Ü—ñ–π –∫–∞—Ç–µ–≥–æ—Ä—ñ—ó
    //   });
    // });
  } catch (error) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—ñ –∫–∞—Ç–µ–≥–æ—Ä—ñ–π:', error.message);
    alert(
      'Error loading categories. Please check the console for more details.'
    );
  }
}

function createCategoryCard(category) {
  return `
    <div class="category-card" data-name="${category.name}">
      <img src="${category.imgURL}" alt="${category.name}" />
      <div class="info">
        <h3>${capitalize(category.name)}</h3>
        <p>${category.filter}</p>
      </div>
    </div>
  `;
}

function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
}

export async function loadExercises() {}

function renderPagination(totalPages) {}
